#include <iostream>

int main()
{
    int arr[] = {1, 2, 3, 4, 5};

    int (&ref)[5] = arr;

    for (int i = 0; i != 5; i++)
    {
        std::cout << (ref)[i] << std::endl;
    }
    
    return 0;
}

// 레퍼런스와 포인터의 차이
// -> 레퍼런스는 선언과 동시에 초기화를 해야 함(대상을 지정)
// -> 포인터는 선언 후 나중에 초기화가 가능
// -> 레퍼런스는 한 번 지정하면 값을 변경하는 것이 불가능
// -> 레퍼런스는 메모리 상에 존재하지 않을 수 있다(포인터는 8바이트 할당)
// -> 레퍼런스의 레퍼런스, 레펴런스의 배열, 레퍼런스의 포인터는 존재할 수 없다.
// -> 레퍼런스를 리턴하는 함수에서 지역 변수의 레퍼런스를 리턴하지 않도록 주의(댕글링 레퍼런스)
// -> 레퍼런스를 리턴하는 경우의 장점은 사이즈가 큰 구조체 등을 리턴할 때 전체복사를
//    하기 때문에 레퍼런스를 리턴하면 참조 주소만 리턴하므로 효율적으로 사용 가능
// -> 레퍼런스에 함수의 리턴 값을 대입하면 오류가 생기지만 const 형태의 레퍼런스로는 대입 가능
//    단, 값은 레퍼런스가 유효한 시점까지만 존재

// -> 배열을 선언할 때 괄호를 사용하는 이유 : []의 연산 우선순위가 &보다 높기 때문에
//    괄호가 없다면 int &(ref[3])과 같이 선언되기 때문

// https://modoocode.com/141